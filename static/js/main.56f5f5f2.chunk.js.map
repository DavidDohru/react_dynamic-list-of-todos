{"version":3,"sources":["components/TodoList/TodoList.jsx","components/TodoList/TodoListPropTypes.jsx","app.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","PropTypes","func","isRequired","number","arrayOf","shape","object","state","selectValue","inputValue","selectSort","todos","filter","x","completed","inputFilter","length","title","includes","this","props","chooseTheUser","selectedUserId","className","onChange","target","setState","value","placeholder","map","key","id","classNames","type","readOnly","onClick","userId","React","Component","getUsersById","fetch","then","item","json","CurrentUser","user","data","prevProps","clearTheUser","name","email","phone","Button","PureComponent","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56f5f5f2.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { TodoListPropTypes } from './TodoListPropTypes';\n\nexport class TodoList extends React.Component {\n  state = {\n    selectValue: 'Both',\n    inputValue: '',\n  }\n\n  selectSort = (todos) => {\n    if (this.state.selectValue === 'Completed') {\n      return todos.filter(x => x.completed);\n    }\n\n    if (this.state.selectValue === 'In proces') {\n      return todos.filter(x => !x.completed);\n    }\n\n    return todos;\n  }\n\n  inputFilter = (todos) => {\n    if (this.state.inputValue.length) {\n      return (todos.filter(x => x.title !== null\n        && (x.title.includes(this.state.inputValue))));\n    }\n\n    return todos;\n  };\n\n  render() {\n    const { chooseTheUser, selectedUserId, todos } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>\n          Todos:&nbsp;\n          {\n              this.inputFilter(this.selectSort(todos)).length\n          }\n        </h2>\n        <div className=\"block__input\">\n          <select\n            onChange={({ target }) => (\n              this.setState({ selectValue: target.value }))}\n          >\n            <option value=\"Both\">Both</option>\n            <option value=\"Completed\">Completed</option>\n            <option value=\"In proces\">In process</option>\n          </select>\n          <input\n            onChange={({ target }) => (\n              this.setState({ inputValue: target.value }))}\n            placeholder=\"search by title\"\n            value={this.state.inputValue}\n          />\n        </div>\n        {(\n          this.inputFilter(this.selectSort(todos))\n            .map(x => (\n              <div\n                key={x.id}\n                className=\"TodoList__list-container\"\n              >\n                <ul className=\"TodoList__list\">\n                  <li className={classNames(\n                    'TodoList__item', x.completed ? 'TodoList__item--checked'\n                      : 'TodoList__item--unchecked',\n                  )}\n                  >\n                    <label>\n                      <input type=\"checkbox\" readOnly />\n                      <p>{x.title}</p>\n                    </label>\n                    <button\n                      onClick={() => chooseTheUser(x.userId)}\n                      className={classNames(\n                        'TodoList__user-button button',\n                        (selectedUserId === x.userId)\n                          && ('TodoList__user-button--selected'),\n                      )}\n                      type=\"button\"\n                    >\n                      User&nbsp;\n                      {x.userId}\n                    </button>\n                  </li>\n                </ul>\n              </div>\n            ))\n        )}\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = TodoListPropTypes;\n","import PropTypes from 'prop-types';\n\nexport const TodoListPropTypes = {\n  chooseTheUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number,\n  todos: PropTypes.arrayOf(PropTypes.shape([\n    PropTypes.object,\n  ])).isRequired,\n};\n","\nconst todosApi = 'https://mate-api.herokuapp.com/todos';\n\nexport const getTodos = () => (\n  fetch(todosApi)\n    .then(item => item.json()));\n\nexport const getUsersById = userId => (\n  fetch(`https://mate-api.herokuapp.com/users/${userId}`)\n    .then(item => item.json()));\n","import React from 'react';\nimport './CurrentUser.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { getUsersById } from '../../app';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    userId: 0,\n  }\n\n  componentDidMount() {\n    this.chooseTheUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      this.chooseTheUser();\n    }\n  }\n\n  chooseTheUser = () => (\n    getUsersById(this.props.userId).then(user => (\n      this.setState({ userId: user.data }))));\n\n  render() {\n    const { userId, clearTheUser } = this.props;\n    const { name, email, phone } = this.state.userId;\n\n    return (\n      <>\n        {(this.state.userId) ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {userId}\n              </span>\n            </h2>\n            <h3 className=\"CurrentUser__name\">{name}</h3>\n            <p className=\"CurrentUser__email\">{email}</p>\n            <p className=\"CurrentUser__phone\">{phone}</p>\n            <div className=\"CurrentUser__button-container\">\n              <Button\n                onClick={() => clearTheUser()}\n                className=\"CurrentUser__button\"\n              >\n                clear\n              </Button>\n            </div>\n          </div>\n        ) : 'No user'}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearTheUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './app';\n\nclass App extends React.Component {\n  state = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    getTodos().then(todos => this.setState(\n      {\n        todos: todos.data,\n      },\n    ));\n  }\n\n  chooseTheUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clearTheUser = () => this.setState({ selectedUserId: 0 });\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            chooseTheUser={this.chooseTheUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearTheUser={this.clearTheUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}